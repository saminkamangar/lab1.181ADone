
/home/samink/Desktop/lab1.181A/led.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 c0 0b 00 00 c4 0b 00 00 c8 0b 00 00     @...............
  30:	cc 0b 00 00 bc 0b 00 00 d0 0b 00 00 d4 0b 00 00     ................

00000040 <__cs3_reset>:
  40:	ea000024 	b	d8 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f8084 	ldr	r8, [pc, #132]	; d0 <__cs3_start_c+0x8c>
  48:	e3580000 	cmp	r8, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2488001 	sub	r8, r8, #1
  54:	0a00001c 	beq	cc <__cs3_start_c+0x88>
  58:	e59f7074 	ldr	r7, [pc, #116]	; d4 <__cs3_start_c+0x90>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e2475010 	sub	r5, r7, #16
  68:	e8951020 	ldm	r5, {r5, r12}
  6c:	e5176008 	ldr	r6, [r7, #-8]
  70:	e155000c 	cmp	r5, r12
  74:	008cc006 	addeq	r12, r12, r6
  78:	0a000007 	beq	9c <__cs3_start_c+0x58>
  7c:	e3560000 	cmp	r6, #0
  80:	0a000005 	beq	9c <__cs3_start_c+0x58>
  84:	e1a0e005 	mov	lr, r5
  88:	e8be000c 	ldm	lr!, {r2, r3}
  8c:	e065400e 	rsb	r4, r5, lr
  90:	e1560004 	cmp	r6, r4
  94:	e8ac000c 	stmia	r12!, {r2, r3}
  98:	1afffffa 	bne	88 <__cs3_start_c+0x44>
  9c:	e517e004 	ldr	lr, [r7, #-4]
  a0:	e35e0000 	cmp	lr, #0
  a4:	11a0300c 	movne	r3, r12
  a8:	0a000003 	beq	bc <__cs3_start_c+0x78>
  ac:	e8a30003 	stmia	r3!, {r0, r1}
  b0:	e06c2003 	rsb	r2, r12, r3
  b4:	e15e0002 	cmp	lr, r2
  b8:	1afffffb 	bne	ac <__cs3_start_c+0x68>
  bc:	e2488001 	sub	r8, r8, #1
  c0:	e3780001 	cmn	r8, #1
  c4:	e2877014 	add	r7, r7, #20
  c8:	1affffe5 	bne	64 <__cs3_start_c+0x20>
  cc:	eb0002a1 	bl	b58 <__cs3_premain>
  d0:	00000001 	.word	0x00000001
  d4:	00000ccc 	.word	0x00000ccc

000000d8 <__cs3_start_asm_sim>:
  d8:	e28f103c 	add	r1, pc, #60	; 0x3c
  dc:	e3a00016 	mov	r0, #22
  e0:	ef123456 	svc	0x00123456
  e4:	e3500000 	cmp	r0, #0
  e8:	ba000008 	blt	110 <__cs3_start_asm_sim+0x38>
  ec:	e59f2028 	ldr	r2, [pc, #40]	; 11c <__cs3_heap_start_ptr>
  f0:	e59fd01c 	ldr	sp, [pc, #28]	; 114 <__cs3_start_asm_sim+0x3c>
  f4:	e5920008 	ldr	r0, [r2, #8]
  f8:	e3500000 	cmp	r0, #0
  fc:	11a0d000 	movne	sp, r0
 100:	e59f1010 	ldr	r1, [pc, #16]	; 118 <__cs3_start_asm_sim+0x40>
 104:	e5920004 	ldr	r0, [r2, #4]
 108:	e3500000 	cmp	r0, #0
 10c:	15810000 	strne	r0, [r1]
 110:	eaffffcb 	b	44 <__cs3_start_c>
 114:	3ffffffc 	.word	0x3ffffffc
 118:	00001120 	.word	0x00001120

0000011c <__cs3_heap_start_ptr>:
 11c:	00001148 	.word	0x00001148

00000120 <_start>:
 120:	e51fd000 	ldr	sp, [pc, #-0]	; 128 <_start+0x8>
 124:	eaffffc6 	b	44 <__cs3_start_c>
 128:	3ffffffc 	.word	0x3ffffffc

0000012c <deregister_tm_clones>:
 12c:	e92d4008 	push	{r3, lr}
 130:	e59f002c 	ldr	r0, [pc, #44]	; 164 <deregister_tm_clones+0x38>
 134:	e59f302c 	ldr	r3, [pc, #44]	; 168 <deregister_tm_clones+0x3c>
 138:	e0603003 	rsb	r3, r0, r3
 13c:	e3530006 	cmp	r3, #6
 140:	8a000001 	bhi	14c <deregister_tm_clones+0x20>
 144:	e8bd4008 	pop	{r3, lr}
 148:	e12fff1e 	bx	lr
 14c:	e59f3018 	ldr	r3, [pc, #24]	; 16c <deregister_tm_clones+0x40>
 150:	e3530000 	cmp	r3, #0
 154:	0afffffa 	beq	144 <deregister_tm_clones+0x18>
 158:	e1a0e00f 	mov	lr, pc
 15c:	e12fff13 	bx	r3
 160:	eafffff7 	b	144 <deregister_tm_clones+0x18>
 164:	00001128 	.word	0x00001128
 168:	0000112b 	.word	0x0000112b
 16c:	00000000 	.word	0x00000000

00000170 <register_tm_clones>:
 170:	e92d4008 	push	{r3, lr}
 174:	e59f0034 	ldr	r0, [pc, #52]	; 1b0 <register_tm_clones+0x40>
 178:	e59f3034 	ldr	r3, [pc, #52]	; 1b4 <register_tm_clones+0x44>
 17c:	e0603003 	rsb	r3, r0, r3
 180:	e1a03143 	asr	r3, r3, #2
 184:	e0833fa3 	add	r3, r3, r3, lsr #31
 188:	e1b010c3 	asrs	r1, r3, #1
 18c:	1a000001 	bne	198 <register_tm_clones+0x28>
 190:	e8bd4008 	pop	{r3, lr}
 194:	e12fff1e 	bx	lr
 198:	e59f2018 	ldr	r2, [pc, #24]	; 1b8 <register_tm_clones+0x48>
 19c:	e3520000 	cmp	r2, #0
 1a0:	0afffffa 	beq	190 <register_tm_clones+0x20>
 1a4:	e1a0e00f 	mov	lr, pc
 1a8:	e12fff12 	bx	r2
 1ac:	eafffff7 	b	190 <register_tm_clones+0x20>
 1b0:	00001128 	.word	0x00001128
 1b4:	00001128 	.word	0x00001128
 1b8:	00000000 	.word	0x00000000

000001bc <__do_global_dtors_aux>:
 1bc:	e92d4010 	push	{r4, lr}
 1c0:	e59f402c 	ldr	r4, [pc, #44]	; 1f4 <__do_global_dtors_aux+0x38>
 1c4:	e5d43000 	ldrb	r3, [r4]
 1c8:	e3530000 	cmp	r3, #0
 1cc:	1a000006 	bne	1ec <__do_global_dtors_aux+0x30>
 1d0:	ebffffd5 	bl	12c <deregister_tm_clones>
 1d4:	e59f301c 	ldr	r3, [pc, #28]	; 1f8 <__do_global_dtors_aux+0x3c>
 1d8:	e3530000 	cmp	r3, #0
 1dc:	159f0018 	ldrne	r0, [pc, #24]	; 1fc <__do_global_dtors_aux+0x40>
 1e0:	1320f000 	nopne	{0}
 1e4:	e3a03001 	mov	r3, #1
 1e8:	e5c43000 	strb	r3, [r4]
 1ec:	e8bd4010 	pop	{r4, lr}
 1f0:	e12fff1e 	bx	lr
 1f4:	00001128 	.word	0x00001128
 1f8:	00000000 	.word	0x00000000
 1fc:	00000c60 	.word	0x00000c60

00000200 <frame_dummy>:
 200:	e92d4008 	push	{r3, lr}
 204:	e59f3034 	ldr	r3, [pc, #52]	; 240 <frame_dummy+0x40>
 208:	e3530000 	cmp	r3, #0
 20c:	159f0030 	ldrne	r0, [pc, #48]	; 244 <frame_dummy+0x44>
 210:	159f1030 	ldrne	r1, [pc, #48]	; 248 <frame_dummy+0x48>
 214:	1320f000 	nopne	{0}
 218:	e59f002c 	ldr	r0, [pc, #44]	; 24c <frame_dummy+0x4c>
 21c:	e5903000 	ldr	r3, [r0]
 220:	e3530000 	cmp	r3, #0
 224:	0a000003 	beq	238 <frame_dummy+0x38>
 228:	e59f3020 	ldr	r3, [pc, #32]	; 250 <frame_dummy+0x50>
 22c:	e3530000 	cmp	r3, #0
 230:	11a0e00f 	movne	lr, pc
 234:	112fff13 	bxne	r3
 238:	e8bd4008 	pop	{r3, lr}
 23c:	eaffffcb 	b	170 <register_tm_clones>
 240:	00000000 	.word	0x00000000
 244:	00000c60 	.word	0x00000c60
 248:	0000112c 	.word	0x0000112c
 24c:	00000cd0 	.word	0x00000cd0
 250:	00000000 	.word	0x00000000

00000254 <delay>:
unsigned int speed = 5;		// determines the length of the delay 
int progress = 0; 	// indicates how many squares the message has travelled


void delay(int n)
{
 254:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 258:	e28db000 	add	r11, sp, #0
 25c:	e24dd014 	sub	sp, sp, #20
 260:	e50b0010 	str	r0, [r11, #-16]
	long i, j;
	int tmp = 1;
 264:	e3a03001 	mov	r3, #1
 268:	e50b300c 	str	r3, [r11, #-12]

//	time_t start = clock();
	for (i = 0; i<100000*n; i++) {
 26c:	e3a03000 	mov	r3, #0
 270:	e50b3008 	str	r3, [r11, #-8]
 274:	ea00000d 	b	2b0 <delay+0x5c>
		if (*keys != 0) {
 278:	e3003ce8 	movw	r3, #3304	; 0xce8
 27c:	e3403000 	movt	r3, #0
 280:	e5933000 	ldr	r3, [r3]
 284:	e5933000 	ldr	r3, [r3]
 288:	e3530000 	cmp	r3, #0
 28c:	0a000000 	beq	294 <delay+0x40>
			//for (j=0; j<4000; j++) {
			//	tmp *= 12345;
			//}
			return;
 290:	ea00000d 	b	2cc <delay+0x78>
		}
		tmp *= 12345;
 294:	e51b300c 	ldr	r3, [r11, #-12]
 298:	e3032039 	movw	r2, #12345	; 0x3039
 29c:	e0030392 	mul	r3, r2, r3
 2a0:	e50b300c 	str	r3, [r11, #-12]
{
	long i, j;
	int tmp = 1;

//	time_t start = clock();
	for (i = 0; i<100000*n; i++) {
 2a4:	e51b3008 	ldr	r3, [r11, #-8]
 2a8:	e2833001 	add	r3, r3, #1
 2ac:	e50b3008 	str	r3, [r11, #-8]
 2b0:	e51b2010 	ldr	r2, [r11, #-16]
 2b4:	e30836a0 	movw	r3, #34464	; 0x86a0
 2b8:	e3403001 	movt	r3, #1
 2bc:	e0020293 	mul	r2, r3, r2
 2c0:	e51b3008 	ldr	r3, [r11, #-8]
 2c4:	e1520003 	cmp	r2, r3
 2c8:	caffffea 	bgt	278 <delay+0x24>
		}
		tmp *= 12345;
	}

//	printf("%d, %d, %d\n", start, clock(), CLOCKS_PER_SEC);
}
 2cc:	e24bd000 	sub	sp, r11, #0
 2d0:	e49db004 	pop	{r11}		; (ldr r11, [sp], #4)
 2d4:	e12fff1e 	bx	lr

000002d8 <shift>:

void shift(void)
{
 2d8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 2dc:	e28db000 	add	r11, sp, #0
 2e0:	e24dd00c 	sub	sp, sp, #12
	int buf;

	buf = (*hex3_hex0 & 0xFF000000) >> 24;
 2e4:	e3003ce0 	movw	r3, #3296	; 0xce0
 2e8:	e3403000 	movt	r3, #0
 2ec:	e5933000 	ldr	r3, [r3]
 2f0:	e5933000 	ldr	r3, [r3]
 2f4:	e1a03c23 	lsr	r3, r3, #24
 2f8:	e50b3008 	str	r3, [r11, #-8]
	*hex5_hex4 <<= 8;
 2fc:	e3003ce4 	movw	r3, #3300	; 0xce4
 300:	e3403000 	movt	r3, #0
 304:	e5932000 	ldr	r2, [r3]
 308:	e3003ce4 	movw	r3, #3300	; 0xce4
 30c:	e3403000 	movt	r3, #0
 310:	e5933000 	ldr	r3, [r3]
 314:	e5933000 	ldr	r3, [r3]
 318:	e1a03403 	lsl	r3, r3, #8
 31c:	e5823000 	str	r3, [r2]
	*hex5_hex4 += buf;
 320:	e3003ce4 	movw	r3, #3300	; 0xce4
 324:	e3403000 	movt	r3, #0
 328:	e5932000 	ldr	r2, [r3]
 32c:	e3003ce4 	movw	r3, #3300	; 0xce4
 330:	e3403000 	movt	r3, #0
 334:	e5933000 	ldr	r3, [r3]
 338:	e5931000 	ldr	r1, [r3]
 33c:	e51b3008 	ldr	r3, [r11, #-8]
 340:	e0813003 	add	r3, r1, r3
 344:	e5823000 	str	r3, [r2]
	*hex3_hex0 <<= 8;
 348:	e3003ce0 	movw	r3, #3296	; 0xce0
 34c:	e3403000 	movt	r3, #0
 350:	e5932000 	ldr	r2, [r3]
 354:	e3003ce0 	movw	r3, #3296	; 0xce0
 358:	e3403000 	movt	r3, #0
 35c:	e5933000 	ldr	r3, [r3]
 360:	e5933000 	ldr	r3, [r3]
 364:	e1a03403 	lsl	r3, r3, #8
 368:	e5823000 	str	r3, [r2]
}
 36c:	e24bd000 	sub	sp, r11, #0
 370:	e49db004 	pop	{r11}		; (ldr r11, [sp], #4)
 374:	e12fff1e 	bx	lr

00000378 <insert>:

void insert(int l)
{
 378:	e92d4800 	push	{r11, lr}
 37c:	e28db004 	add	r11, sp, #4
 380:	e24dd008 	sub	sp, sp, #8
 384:	e50b0008 	str	r0, [r11, #-8]
	shift();
 388:	ebffffd2 	bl	2d8 <shift>
	*hex3_hex0 += l;
 38c:	e3003ce0 	movw	r3, #3296	; 0xce0
 390:	e3403000 	movt	r3, #0
 394:	e5932000 	ldr	r2, [r3]
 398:	e3003ce0 	movw	r3, #3296	; 0xce0
 39c:	e3403000 	movt	r3, #0
 3a0:	e5933000 	ldr	r3, [r3]
 3a4:	e5931000 	ldr	r1, [r3]
 3a8:	e51b3008 	ldr	r3, [r11, #-8]
 3ac:	e0813003 	add	r3, r1, r3
 3b0:	e5823000 	str	r3, [r2]
}
 3b4:	e24bd004 	sub	sp, r11, #4
 3b8:	e8bd8800 	pop	{r11, pc}

000003bc <clear>:

void clear(void)
{
 3bc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 3c0:	e28db000 	add	r11, sp, #0
	*hex3_hex0 = 0;
 3c4:	e3003ce0 	movw	r3, #3296	; 0xce0
 3c8:	e3403000 	movt	r3, #0
 3cc:	e5933000 	ldr	r3, [r3]
 3d0:	e3a02000 	mov	r2, #0
 3d4:	e5832000 	str	r2, [r3]
	*hex5_hex4 = 0;
 3d8:	e3003ce4 	movw	r3, #3300	; 0xce4
 3dc:	e3403000 	movt	r3, #0
 3e0:	e5933000 	ldr	r3, [r3]
 3e4:	e3a02000 	mov	r2, #0
 3e8:	e5832000 	str	r2, [r3]
}
 3ec:	e24bd000 	sub	sp, r11, #0
 3f0:	e49db004 	pop	{r11}		; (ldr r11, [sp], #4)
 3f4:	e12fff1e 	bx	lr

000003f8 <display>:

void display(char message[], int len)
{
 3f8:	e92d4800 	push	{r11, lr}
 3fc:	e28db004 	add	r11, sp, #4
 400:	e24dd008 	sub	sp, sp, #8
 404:	e50b0008 	str	r0, [r11, #-8]
 408:	e50b100c 	str	r1, [r11, #-12]
	insert(message[progress++]);
 40c:	e3013144 	movw	r3, #4420	; 0x1144
 410:	e3403000 	movt	r3, #0
 414:	e5933000 	ldr	r3, [r3]
 418:	e1a02003 	mov	r2, r3
 41c:	e2821001 	add	r1, r2, #1
 420:	e3013144 	movw	r3, #4420	; 0x1144
 424:	e3403000 	movt	r3, #0
 428:	e5831000 	str	r1, [r3]
 42c:	e1a03002 	mov	r3, r2
 430:	e51b2008 	ldr	r2, [r11, #-8]
 434:	e0823003 	add	r3, r2, r3
 438:	e5d33000 	ldrb	r3, [r3]
 43c:	e1a00003 	mov	r0, r3
 440:	ebffffcc 	bl	378 <insert>
	if (progress == len) progress = 0;
 444:	e3013144 	movw	r3, #4420	; 0x1144
 448:	e3403000 	movt	r3, #0
 44c:	e5932000 	ldr	r2, [r3]
 450:	e51b300c 	ldr	r3, [r11, #-12]
 454:	e1520003 	cmp	r2, r3
 458:	1a000003 	bne	46c <display+0x74>
 45c:	e3013144 	movw	r3, #4420	; 0x1144
 460:	e3403000 	movt	r3, #0
 464:	e3a02000 	mov	r2, #0
 468:	e5832000 	str	r2, [r3]
	//delay(speed);
}
 46c:	e24bd004 	sub	sp, r11, #4
 470:	e8bd8800 	pop	{r11, pc}

00000474 <main>:

int main(void)
{
 474:	e92d4800 	push	{r11, lr}
 478:	e28db004 	add	r11, sp, #4
 47c:	e24dd030 	sub	sp, sp, #48	; 0x30
	int switch_value;
	int buf= 0;
 480:	e3a03000 	mov	r3, #0
 484:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
	//char hello_str[13] = {0x76, 0x79, 0x38, 0x38, 0x3F, 0x00, 0x3E, 0x3E, 0x3F, 0x50, 0x38, 0x5E, 0x00}; // array containing hello world message
	char hello_str[13] = {H, E, L, L, O, SPACE, U, U, O, R, L, D, SPACE}; // array containing hello world message
 488:	e3002c64 	movw	r2, #3172	; 0xc64
 48c:	e3402000 	movt	r2, #0
 490:	e24b302c 	sub	r3, r11, #44	; 0x2c
 494:	e1a0c002 	mov	r12, r2
 498:	e59c0000 	ldr	r0, [r12]
 49c:	e59c1004 	ldr	r1, [r12, #4]
 4a0:	e59c2008 	ldr	r2, [r12, #8]
 4a4:	e8a30007 	stmia	r3!, {r0, r1, r2}
 4a8:	e5dc200c 	ldrb	r2, [r12, #12]
 4ac:	e5c32000 	strb	r2, [r3]
	//int custom = *(switchptr);
	char custom_str[6] = {0};
 4b0:	e3a03000 	mov	r3, #0
 4b4:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
 4b8:	e3a03000 	mov	r3, #0
 4bc:	e14b33b0 	strh	r3, [r11, #-48]	; 0xffffffd0
	int paused = 0;
 4c0:	e3a03000 	mov	r3, #0
 4c4:	e50b3008 	str	r3, [r11, #-8]
	enum states {
		HELLO,
		CUSTOM
	};
	
	enum states state = HELLO;
 4c8:	e3a03000 	mov	r3, #0
 4cc:	e54b3015 	strb	r3, [r11, #-21]	; 0xffffffeb

	clear();
 4d0:	ebffffb9 	bl	3bc <clear>

	while (1) {
		if (*keys != 0) {	// poll for key presses
 4d4:	e3003ce8 	movw	r3, #3304	; 0xce8
 4d8:	e3403000 	movt	r3, #0
 4dc:	e5933000 	ldr	r3, [r3]
 4e0:	e5933000 	ldr	r3, [r3]
 4e4:	e3530000 	cmp	r3, #0
 4e8:	0a000076 	beq	6c8 <main+0x254>
			switch (*keys) {
 4ec:	e3003ce8 	movw	r3, #3304	; 0xce8
 4f0:	e3403000 	movt	r3, #0
 4f4:	e5933000 	ldr	r3, [r3]
 4f8:	e5933000 	ldr	r3, [r3]
 4fc:	e2433001 	sub	r3, r3, #1
 500:	e3530007 	cmp	r3, #7
 504:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 508:	ea00005e 	b	688 <main+0x214>
 50c:	0000052c 	.word	0x0000052c
 510:	00000564 	.word	0x00000564
 514:	00000688 	.word	0x00000688
 518:	000005b0 	.word	0x000005b0
 51c:	00000688 	.word	0x00000688
 520:	00000688 	.word	0x00000688
 524:	00000688 	.word	0x00000688
 528:	000005fc 	.word	0x000005fc
				case 1: // key 0 is pressed
					paused = !paused;
 52c:	e51b3008 	ldr	r3, [r11, #-8]
 530:	e3530000 	cmp	r3, #0
 534:	13a03000 	movne	r3, #0
 538:	03a03001 	moveq	r3, #1
 53c:	e6ef3073 	uxtb	r3, r3
 540:	e50b3008 	str	r3, [r11, #-8]
					*led = paused;
 544:	e3003cd8 	movw	r3, #3288	; 0xcd8
 548:	e3403000 	movt	r3, #0
 54c:	e5933000 	ldr	r3, [r3]
 550:	e51b2008 	ldr	r2, [r11, #-8]
 554:	e5832000 	str	r2, [r3]
					delay(1);
 558:	e3a00001 	mov	r0, #1
 55c:	ebffff3c 	bl	254 <delay>
				break;
 560:	ea000048 	b	688 <main+0x214>
				case 2: // key 1 is pressed
					*led = 2;
 564:	e3003cd8 	movw	r3, #3288	; 0xcd8
 568:	e3403000 	movt	r3, #0
 56c:	e5933000 	ldr	r3, [r3]
 570:	e3a02002 	mov	r2, #2
 574:	e5832000 	str	r2, [r3]
					if (speed > 1) speed -= 1;
 578:	e3003cec 	movw	r3, #3308	; 0xcec
 57c:	e3403000 	movt	r3, #0
 580:	e5933000 	ldr	r3, [r3]
 584:	e3530001 	cmp	r3, #1
 588:	9a000007 	bls	5ac <main+0x138>
 58c:	e3003cec 	movw	r3, #3308	; 0xcec
 590:	e3403000 	movt	r3, #0
 594:	e5933000 	ldr	r3, [r3]
 598:	e2432001 	sub	r2, r3, #1
 59c:	e3003cec 	movw	r3, #3308	; 0xcec
 5a0:	e3403000 	movt	r3, #0
 5a4:	e5832000 	str	r2, [r3]
				break;
 5a8:	ea000036 	b	688 <main+0x214>
 5ac:	ea000035 	b	688 <main+0x214>
				case 4: // key 2 is pressed
					*led = 4;
 5b0:	e3003cd8 	movw	r3, #3288	; 0xcd8
 5b4:	e3403000 	movt	r3, #0
 5b8:	e5933000 	ldr	r3, [r3]
 5bc:	e3a02004 	mov	r2, #4
 5c0:	e5832000 	str	r2, [r3]
					if (speed < 9) speed += 1;
 5c4:	e3003cec 	movw	r3, #3308	; 0xcec
 5c8:	e3403000 	movt	r3, #0
 5cc:	e5933000 	ldr	r3, [r3]
 5d0:	e3530008 	cmp	r3, #8
 5d4:	8a000007 	bhi	5f8 <main+0x184>
 5d8:	e3003cec 	movw	r3, #3308	; 0xcec
 5dc:	e3403000 	movt	r3, #0
 5e0:	e5933000 	ldr	r3, [r3]
 5e4:	e2832001 	add	r2, r3, #1
 5e8:	e3003cec 	movw	r3, #3308	; 0xcec
 5ec:	e3403000 	movt	r3, #0
 5f0:	e5832000 	str	r2, [r3]
				break;
 5f4:	ea000023 	b	688 <main+0x214>
 5f8:	ea000022 	b	688 <main+0x214>
				case 8: // key 3 is pressed
					*led = 8;
 5fc:	e3003cd8 	movw	r3, #3288	; 0xcd8
 600:	e3403000 	movt	r3, #0
 604:	e5933000 	ldr	r3, [r3]
 608:	e3a02008 	mov	r2, #8
 60c:	e5832000 	str	r2, [r3]
					if (state == HELLO) {
 610:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
 614:	e3530000 	cmp	r3, #0
 618:	1a000012 	bne	668 <main+0x1f4>
						state = CUSTOM;
 61c:	e3a03001 	mov	r3, #1
 620:	e54b3015 	strb	r3, [r11, #-21]	; 0xffffffeb
						custom_str[1] = *switchptr & 0x7F;
 624:	e3003cdc 	movw	r3, #3292	; 0xcdc
 628:	e3403000 	movt	r3, #0
 62c:	e5933000 	ldr	r3, [r3]
 630:	e5933000 	ldr	r3, [r3]
 634:	e6ef3073 	uxtb	r3, r3
 638:	e203307f 	and	r3, r3, #127	; 0x7f
 63c:	e6ef3073 	uxtb	r3, r3
 640:	e54b3033 	strb	r3, [r11, #-51]	; 0xffffffcd
						custom_str[0] = (*switchptr & 0x380) >> 7;
 644:	e3003cdc 	movw	r3, #3292	; 0xcdc
 648:	e3403000 	movt	r3, #0
 64c:	e5933000 	ldr	r3, [r3]
 650:	e5933000 	ldr	r3, [r3]
 654:	e2033d0e 	and	r3, r3, #896	; 0x380
 658:	e1a033c3 	asr	r3, r3, #7
 65c:	e6ef3073 	uxtb	r3, r3
 660:	e54b3034 	strb	r3, [r11, #-52]	; 0xffffffcc
 664:	ea000001 	b	670 <main+0x1fc>
					} else {
						state = HELLO;
 668:	e3a03000 	mov	r3, #0
 66c:	e54b3015 	strb	r3, [r11, #-21]	; 0xffffffeb
					}
					clear();
 670:	ebffff51 	bl	3bc <clear>
					progress = 0;
 674:	e3013144 	movw	r3, #4420	; 0x1144
 678:	e3403000 	movt	r3, #0
 67c:	e3a02000 	mov	r2, #0
 680:	e5832000 	str	r2, [r3]
				break;
 684:	e1a00000 	nop			; (mov r0, r0)

			}
			for (j=0; j<500000; j++) {
 688:	e3a03000 	mov	r3, #0
 68c:	e50b3010 	str	r3, [r11, #-16]
 690:	ea000006 	b	6b0 <main+0x23c>
				tmp *= 12345;
 694:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 698:	e3032039 	movw	r2, #12345	; 0x3039
 69c:	e0030392 	mul	r3, r2, r3
 6a0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
					clear();
					progress = 0;
				break;

			}
			for (j=0; j<500000; j++) {
 6a4:	e51b3010 	ldr	r3, [r11, #-16]
 6a8:	e2833001 	add	r3, r3, #1
 6ac:	e50b3010 	str	r3, [r11, #-16]
 6b0:	e51b2010 	ldr	r2, [r11, #-16]
 6b4:	e30a311f 	movw	r3, #41247	; 0xa11f
 6b8:	e3403007 	movt	r3, #7
 6bc:	e1520003 	cmp	r2, r3
 6c0:	dafffff3 	ble	694 <main+0x220>
 6c4:	ea000008 	b	6ec <main+0x278>
				tmp *= 12345;
			}
		} else {
			*led = *led & 0x01;	// Clear small LEDs except the last one.
 6c8:	e3003cd8 	movw	r3, #3288	; 0xcd8
 6cc:	e3403000 	movt	r3, #0
 6d0:	e5932000 	ldr	r2, [r3]
 6d4:	e3003cd8 	movw	r3, #3288	; 0xcd8
 6d8:	e3403000 	movt	r3, #0
 6dc:	e5933000 	ldr	r3, [r3]
 6e0:	e5933000 	ldr	r3, [r3]
 6e4:	e2033001 	and	r3, r3, #1
 6e8:	e5823000 	str	r3, [r2]
		}


		switch (state) {
 6ec:	e55b3015 	ldrb	r3, [r11, #-21]	; 0xffffffeb
 6f0:	e3530000 	cmp	r3, #0
 6f4:	0a000002 	beq	704 <main+0x290>
 6f8:	e3530001 	cmp	r3, #1
 6fc:	0a00000a 	beq	72c <main+0x2b8>
 700:	ea000046 	b	820 <main+0x3ac>
			case HELLO:
				if (paused) continue;
 704:	e51b3008 	ldr	r3, [r11, #-8]
 708:	e3530000 	cmp	r3, #0
 70c:	0a000001 	beq	718 <main+0x2a4>
 710:	e1a00000 	nop			; (mov r0, r0)
*/					if (progress == 7) progress = 0;
				}
				break;
		}
		delay(speed);
	}
 714:	eaffff6e 	b	4d4 <main+0x60>


		switch (state) {
			case HELLO:
				if (paused) continue;
				display(hello_str, 13);
 718:	e24b302c 	sub	r3, r11, #44	; 0x2c
 71c:	e1a00003 	mov	r0, r3
 720:	e3a0100d 	mov	r1, #13
 724:	ebffff33 	bl	3f8 <display>
				break;
 728:	ea00003c 	b	820 <main+0x3ac>
			case CUSTOM:
				if (paused) {
 72c:	e51b3008 	ldr	r3, [r11, #-8]
 730:	e3530000 	cmp	r3, #0
 734:	0a00002a 	beq	7e4 <main+0x370>
					// Read and display
						
					custom_str[1] = *switchptr & 0x7F;
 738:	e3003cdc 	movw	r3, #3292	; 0xcdc
 73c:	e3403000 	movt	r3, #0
 740:	e5933000 	ldr	r3, [r3]
 744:	e5933000 	ldr	r3, [r3]
 748:	e6ef3073 	uxtb	r3, r3
 74c:	e203307f 	and	r3, r3, #127	; 0x7f
 750:	e6ef3073 	uxtb	r3, r3
 754:	e54b3033 	strb	r3, [r11, #-51]	; 0xffffffcd
					custom_str[0] = (*switchptr & 0x380) >> 7;
 758:	e3003cdc 	movw	r3, #3292	; 0xcdc
 75c:	e3403000 	movt	r3, #0
 760:	e5933000 	ldr	r3, [r3]
 764:	e5933000 	ldr	r3, [r3]
 768:	e2033d0e 	and	r3, r3, #896	; 0x380
 76c:	e1a033c3 	asr	r3, r3, #7
 770:	e6ef3073 	uxtb	r3, r3
 774:	e54b3034 	strb	r3, [r11, #-52]	; 0xffffffcc
					clear();
 778:	ebffff0f 	bl	3bc <clear>
					insert(custom_str[0]);
 77c:	e55b3034 	ldrb	r3, [r11, #-52]	; 0xffffffcc
 780:	e1a00003 	mov	r0, r3
 784:	ebfffefb 	bl	378 <insert>
					insert(custom_str[1]);
 788:	e55b3033 	ldrb	r3, [r11, #-51]	; 0xffffffcd
 78c:	e1a00003 	mov	r0, r3
 790:	ebfffef8 	bl	378 <insert>
					if (progress > 2) 
 794:	e3013144 	movw	r3, #4420	; 0x1144
 798:	e3403000 	movt	r3, #0
 79c:	e5933000 	ldr	r3, [r3]
 7a0:	e3530002 	cmp	r3, #2
 7a4:	da00001c 	ble	81c <main+0x3a8>
						for(i = 0; i < progress - 2; i++) shift();
 7a8:	e3a03000 	mov	r3, #0
 7ac:	e50b300c 	str	r3, [r11, #-12]
 7b0:	ea000003 	b	7c4 <main+0x350>
 7b4:	ebfffec7 	bl	2d8 <shift>
 7b8:	e51b300c 	ldr	r3, [r11, #-12]
 7bc:	e2833001 	add	r3, r3, #1
 7c0:	e50b300c 	str	r3, [r11, #-12]
 7c4:	e3013144 	movw	r3, #4420	; 0x1144
 7c8:	e3403000 	movt	r3, #0
 7cc:	e5933000 	ldr	r3, [r3]
 7d0:	e2432002 	sub	r2, r3, #2
 7d4:	e51b300c 	ldr	r3, [r11, #-12]
 7d8:	e1520003 	cmp	r2, r3
 7dc:	cafffff4 	bgt	7b4 <main+0x340>
					
					progress++;

*/					if (progress == 7) progress = 0;
				}
				break;
 7e0:	ea00000d 	b	81c <main+0x3a8>


					//*hex3_hex0 = (*hex3_hex0 & 0xFFFFFF00) + (*switchptr & 0xFF);
					//custom_str[progress] = *switchptr & 0x7F;
				} else {
					display(custom_str, 6);
 7e4:	e24b3034 	sub	r3, r11, #52	; 0x34
 7e8:	e1a00003 	mov	r0, r3
 7ec:	e3a01006 	mov	r1, #6
 7f0:	ebffff00 	bl	3f8 <display>
					else if (progress == 1) insert((custom & 0x7F));
					else shift();
					
					progress++;

*/					if (progress == 7) progress = 0;
 7f4:	e3013144 	movw	r3, #4420	; 0x1144
 7f8:	e3403000 	movt	r3, #0
 7fc:	e5933000 	ldr	r3, [r3]
 800:	e3530007 	cmp	r3, #7
 804:	1a000004 	bne	81c <main+0x3a8>
 808:	e3013144 	movw	r3, #4420	; 0x1144
 80c:	e3403000 	movt	r3, #0
 810:	e3a02000 	mov	r2, #0
 814:	e5832000 	str	r2, [r3]
				}
				break;
 818:	eaffffff 	b	81c <main+0x3a8>
 81c:	e1a00000 	nop			; (mov r0, r0)
		}
		delay(speed);
 820:	e3003cec 	movw	r3, #3308	; 0xcec
 824:	e3403000 	movt	r3, #0
 828:	e5933000 	ldr	r3, [r3]
 82c:	e1a00003 	mov	r0, r3
 830:	ebfffe87 	bl	254 <delay>
	}
 834:	eaffff26 	b	4d4 <main+0x60>

00000838 <atexit>:
 838:	e92d4008 	push	{r3, lr}
 83c:	e1a01000 	mov	r1, r0
 840:	e3a00000 	mov	r0, #0
 844:	e1a03000 	mov	r3, r0
 848:	e1a02000 	mov	r2, r0
 84c:	eb00000e 	bl	88c <__register_exitproc>
 850:	e8bd4008 	pop	{r3, lr}
 854:	e12fff1e 	bx	lr

00000858 <exit>:
 858:	e92d4008 	push	{r3, lr}
 85c:	e3a01000 	mov	r1, #0
 860:	e1a04000 	mov	r4, r0
 864:	eb000044 	bl	97c <__call_exitprocs>
 868:	e59f3018 	ldr	r3, [pc, #24]	; 888 <exit+0x30>
 86c:	e5930000 	ldr	r0, [r3]
 870:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 874:	e3530000 	cmp	r3, #0
 878:	11a0e00f 	movne	lr, pc
 87c:	112fff13 	bxne	r3
 880:	e1a00004 	mov	r0, r4
 884:	eb0000c6 	bl	ba4 <_exit>
 888:	00000c74 	.word	0x00000c74

0000088c <__register_exitproc>:
 88c:	e59fc0e0 	ldr	r12, [pc, #224]	; 974 <__register_exitproc+0xe8>
 890:	e92d4070 	push	{r4, r5, r6, lr}
 894:	e59c5000 	ldr	r5, [r12]
 898:	e595c148 	ldr	r12, [r5, #328]	; 0x148
 89c:	e35c0000 	cmp	r12, #0
 8a0:	0285cf53 	addeq	r12, r5, #332	; 0x14c
 8a4:	e59c4004 	ldr	r4, [r12, #4]
 8a8:	0585c148 	streq	r12, [r5, #328]	; 0x148
 8ac:	e354001f 	cmp	r4, #31
 8b0:	e24dd010 	sub	sp, sp, #16
 8b4:	e1a06000 	mov	r6, r0
 8b8:	da000016 	ble	918 <__register_exitproc+0x8c>
 8bc:	e59f00b4 	ldr	r0, [pc, #180]	; 978 <__register_exitproc+0xec>
 8c0:	e3500000 	cmp	r0, #0
 8c4:	1a000003 	bne	8d8 <__register_exitproc+0x4c>
 8c8:	e3e00000 	mvn	r0, #0
 8cc:	e28dd010 	add	sp, sp, #16
 8d0:	e8bd4070 	pop	{r4, r5, r6, lr}
 8d4:	e12fff1e 	bx	lr
 8d8:	e3a00e19 	mov	r0, #400	; 0x190
 8dc:	e58d100c 	str	r1, [sp, #12]
 8e0:	e58d2008 	str	r2, [sp, #8]
 8e4:	e58d3004 	str	r3, [sp, #4]
 8e8:	e320f000 	nop	{0}
 8ec:	e250c000 	subs	r12, r0, #0
 8f0:	e59d100c 	ldr	r1, [sp, #12]
 8f4:	e59d2008 	ldr	r2, [sp, #8]
 8f8:	e59d3004 	ldr	r3, [sp, #4]
 8fc:	0afffff1 	beq	8c8 <__register_exitproc+0x3c>
 900:	e5950148 	ldr	r0, [r5, #328]	; 0x148
 904:	e3a04000 	mov	r4, #0
 908:	e88c0011 	stm	r12, {r0, r4}
 90c:	e585c148 	str	r12, [r5, #328]	; 0x148
 910:	e58c4188 	str	r4, [r12, #392]	; 0x188
 914:	e58c418c 	str	r4, [r12, #396]	; 0x18c
 918:	e3560000 	cmp	r6, #0
 91c:	1a000007 	bne	940 <__register_exitproc+0xb4>
 920:	e2843001 	add	r3, r4, #1
 924:	e3a00000 	mov	r0, #0
 928:	e2844002 	add	r4, r4, #2
 92c:	e58c3004 	str	r3, [r12, #4]
 930:	e78c1104 	str	r1, [r12, r4, lsl #2]
 934:	e28dd010 	add	sp, sp, #16
 938:	e8bd4070 	pop	{r4, r5, r6, lr}
 93c:	e12fff1e 	bx	lr
 940:	e3a05001 	mov	r5, #1
 944:	e1a05415 	lsl	r5, r5, r4
 948:	e08c0104 	add	r0, r12, r4, lsl #2
 94c:	e5802088 	str	r2, [r0, #136]	; 0x88
 950:	e59c2188 	ldr	r2, [r12, #392]	; 0x188
 954:	e1822005 	orr	r2, r2, r5
 958:	e58c2188 	str	r2, [r12, #392]	; 0x188
 95c:	e5803108 	str	r3, [r0, #264]	; 0x108
 960:	e3560002 	cmp	r6, #2
 964:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 968:	01835005 	orreq	r5, r3, r5
 96c:	058c518c 	streq	r5, [r12, #396]	; 0x18c
 970:	eaffffea 	b	920 <__register_exitproc+0x94>
 974:	00000c74 	.word	0x00000c74
 978:	00000000 	.word	0x00000000

0000097c <__call_exitprocs>:
 97c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 980:	e59f315c 	ldr	r3, [pc, #348]	; ae4 <__call_exitprocs+0x168>
 984:	e5933000 	ldr	r3, [r3]
 988:	e24dd014 	sub	sp, sp, #20
 98c:	e2832f52 	add	r2, r3, #328	; 0x148
 990:	e58d3004 	str	r3, [sp, #4]
 994:	e58d0008 	str	r0, [sp, #8]
 998:	e58d200c 	str	r2, [sp, #12]
 99c:	e1a07001 	mov	r7, r1
 9a0:	e3a09001 	mov	r9, #1
 9a4:	e59d3004 	ldr	r3, [sp, #4]
 9a8:	e5938148 	ldr	r8, [r3, #328]	; 0x148
 9ac:	e3580000 	cmp	r8, #0
 9b0:	0a000038 	beq	a98 <__call_exitprocs+0x11c>
 9b4:	e59db00c 	ldr	r11, [sp, #12]
 9b8:	e5986004 	ldr	r6, [r8, #4]
 9bc:	e2564001 	subs	r4, r6, #1
 9c0:	50885106 	addpl	r5, r8, r6, lsl #2
 9c4:	52866002 	addpl	r6, r6, #2
 9c8:	52855f42 	addpl	r5, r5, #264	; 0x108
 9cc:	50886106 	addpl	r6, r8, r6, lsl #2
 9d0:	5a000008 	bpl	9f8 <__call_exitprocs+0x7c>
 9d4:	ea00002c 	b	a8c <__call_exitprocs+0x110>
 9d8:	e5153004 	ldr	r3, [r5, #-4]
 9dc:	e1530007 	cmp	r3, r7
 9e0:	0a000006 	beq	a00 <__call_exitprocs+0x84>
 9e4:	e2444001 	sub	r4, r4, #1
 9e8:	e3740001 	cmn	r4, #1
 9ec:	e2455004 	sub	r5, r5, #4
 9f0:	e2466004 	sub	r6, r6, #4
 9f4:	0a000024 	beq	a8c <__call_exitprocs+0x110>
 9f8:	e3570000 	cmp	r7, #0
 9fc:	1afffff5 	bne	9d8 <__call_exitprocs+0x5c>
 a00:	e5983004 	ldr	r3, [r8, #4]
 a04:	e2433001 	sub	r3, r3, #1
 a08:	e1530004 	cmp	r3, r4
 a0c:	e5163004 	ldr	r3, [r6, #-4]
 a10:	13a02000 	movne	r2, #0
 a14:	05884004 	streq	r4, [r8, #4]
 a18:	15062004 	strne	r2, [r6, #-4]
 a1c:	e3530000 	cmp	r3, #0
 a20:	0affffef 	beq	9e4 <__call_exitprocs+0x68>
 a24:	e1a02419 	lsl	r2, r9, r4
 a28:	e5981188 	ldr	r1, [r8, #392]	; 0x188
 a2c:	e1120001 	tst	r2, r1
 a30:	e598a004 	ldr	r10, [r8, #4]
 a34:	0a00000d 	beq	a70 <__call_exitprocs+0xf4>
 a38:	e598118c 	ldr	r1, [r8, #396]	; 0x18c
 a3c:	e1120001 	tst	r2, r1
 a40:	1a00000d 	bne	a7c <__call_exitprocs+0x100>
 a44:	e59d0008 	ldr	r0, [sp, #8]
 a48:	e5151084 	ldr	r1, [r5, #-132]	; 0xffffff7c
 a4c:	e1a0e00f 	mov	lr, pc
 a50:	e12fff13 	bx	r3
 a54:	e5983004 	ldr	r3, [r8, #4]
 a58:	e153000a 	cmp	r3, r10
 a5c:	1affffd0 	bne	9a4 <__call_exitprocs+0x28>
 a60:	e59b3000 	ldr	r3, [r11]
 a64:	e1530008 	cmp	r3, r8
 a68:	0affffdd 	beq	9e4 <__call_exitprocs+0x68>
 a6c:	eaffffcc 	b	9a4 <__call_exitprocs+0x28>
 a70:	e1a0e00f 	mov	lr, pc
 a74:	e12fff13 	bx	r3
 a78:	eafffff5 	b	a54 <__call_exitprocs+0xd8>
 a7c:	e5150084 	ldr	r0, [r5, #-132]	; 0xffffff7c
 a80:	e1a0e00f 	mov	lr, pc
 a84:	e12fff13 	bx	r3
 a88:	eafffff1 	b	a54 <__call_exitprocs+0xd8>
 a8c:	e59f2054 	ldr	r2, [pc, #84]	; ae8 <__call_exitprocs+0x16c>
 a90:	e3520000 	cmp	r2, #0
 a94:	1a000002 	bne	aa4 <__call_exitprocs+0x128>
 a98:	e28dd014 	add	sp, sp, #20
 a9c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 aa0:	e12fff1e 	bx	lr
 aa4:	e5983004 	ldr	r3, [r8, #4]
 aa8:	e3530000 	cmp	r3, #0
 aac:	e5983000 	ldr	r3, [r8]
 ab0:	1a000008 	bne	ad8 <__call_exitprocs+0x15c>
 ab4:	e3530000 	cmp	r3, #0
 ab8:	0a000006 	beq	ad8 <__call_exitprocs+0x15c>
 abc:	e1a00008 	mov	r0, r8
 ac0:	e58b3000 	str	r3, [r11]
 ac4:	e320f000 	nop	{0}
 ac8:	e59b8000 	ldr	r8, [r11]
 acc:	e3580000 	cmp	r8, #0
 ad0:	1affffb8 	bne	9b8 <__call_exitprocs+0x3c>
 ad4:	eaffffef 	b	a98 <__call_exitprocs+0x11c>
 ad8:	e1a0b008 	mov	r11, r8
 adc:	e1a08003 	mov	r8, r3
 ae0:	eafffff9 	b	acc <__call_exitprocs+0x150>
 ae4:	00000c74 	.word	0x00000c74
 ae8:	00000000 	.word	0x00000000

00000aec <register_fini>:
 aec:	e92d4008 	push	{r3, lr}
 af0:	e59f3010 	ldr	r3, [pc, #16]	; b08 <register_fini+0x1c>
 af4:	e3530000 	cmp	r3, #0
 af8:	159f000c 	ldrne	r0, [pc, #12]	; b0c <register_fini+0x20>
 afc:	1bffff4d 	blne	838 <atexit>
 b00:	e8bd4008 	pop	{r3, lr}
 b04:	e12fff1e 	bx	lr
 b08:	00000c9c 	.word	0x00000c9c
 b0c:	00000b10 	.word	0x00000b10

00000b10 <__libc_fini_array>:
 b10:	e92d4038 	push	{r3, r4, r5, lr}
 b14:	e59f5034 	ldr	r5, [pc, #52]	; b50 <__libc_fini_array+0x40>
 b18:	e59f4034 	ldr	r4, [pc, #52]	; b54 <__libc_fini_array+0x44>
 b1c:	e0654004 	rsb	r4, r5, r4
 b20:	e1b04144 	asrs	r4, r4, #2
 b24:	10855104 	addne	r5, r5, r4, lsl #2
 b28:	0a000005 	beq	b44 <__libc_fini_array+0x34>
 b2c:	e2444001 	sub	r4, r4, #1
 b30:	e5353004 	ldr	r3, [r5, #-4]!
 b34:	e1a0e00f 	mov	lr, pc
 b38:	e12fff13 	bx	r3
 b3c:	e3540000 	cmp	r4, #0
 b40:	1afffff9 	bne	b2c <__libc_fini_array+0x1c>
 b44:	eb000054 	bl	c9c <__libc_fini>
 b48:	e8bd4038 	pop	{r3, r4, r5, lr}
 b4c:	e12fff1e 	bx	lr
 b50:	00000cb4 	.word	0x00000cb4
 b54:	00000cb8 	.word	0x00000cb8

00000b58 <__cs3_premain>:
 b58:	e92d4008 	push	{r3, lr}
 b5c:	eb00001d 	bl	bd8 <__libc_init_array>
 b60:	e59f3030 	ldr	r3, [pc, #48]	; b98 <__cs3_premain+0x40>
 b64:	e3530000 	cmp	r3, #0
 b68:	15930000 	ldrne	r0, [r3]
 b6c:	01a00003 	moveq	r0, r3
 b70:	e59f3024 	ldr	r3, [pc, #36]	; b9c <__cs3_premain+0x44>
 b74:	e3530000 	cmp	r3, #0
 b78:	15931000 	ldrne	r1, [r3]
 b7c:	01a01003 	moveq	r1, r3
 b80:	e3a02000 	mov	r2, #0
 b84:	ebfffe3a 	bl	474 <main>
 b88:	e59f3010 	ldr	r3, [pc, #16]	; ba0 <__cs3_premain+0x48>
 b8c:	e3530000 	cmp	r3, #0
 b90:	1bffff30 	blne	858 <exit>
 b94:	eafffffe 	b	b94 <__cs3_premain+0x3c>
	...
 ba0:	00000858 	.word	0x00000858

00000ba4 <_exit>:
 ba4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 ba8:	e3a00018 	mov	r0, #24
 bac:	e59f1004 	ldr	r1, [pc, #4]	; bb8 <_exit+0x14>
 bb0:	ef123456 	svc	0x00123456
 bb4:	eafffffe 	b	bb4 <_exit+0x10>
 bb8:	00020026 	.word	0x00020026

00000bbc <__cs3_isr_interrupt>:
 bbc:	eafffffe 	b	bbc <__cs3_isr_interrupt>

00000bc0 <__cs3_isr_undef>:
 bc0:	eafffffe 	b	bc0 <__cs3_isr_undef>

00000bc4 <__cs3_isr_swi>:
 bc4:	eafffffe 	b	bc4 <__cs3_isr_swi>

00000bc8 <__cs3_isr_pabort>:
 bc8:	eafffffe 	b	bc8 <__cs3_isr_pabort>

00000bcc <__cs3_isr_dabort>:
 bcc:	eafffffe 	b	bcc <__cs3_isr_dabort>

00000bd0 <__cs3_isr_irq>:
 bd0:	eafffffe 	b	bd0 <__cs3_isr_irq>

00000bd4 <__cs3_isr_fiq>:
 bd4:	eafffffe 	b	bd4 <__cs3_isr_fiq>

00000bd8 <__libc_init_array>:
 bd8:	e92d4070 	push	{r4, r5, r6, lr}
 bdc:	e59f506c 	ldr	r5, [pc, #108]	; c50 <__libc_init_array+0x78>
 be0:	e59f606c 	ldr	r6, [pc, #108]	; c54 <__libc_init_array+0x7c>
 be4:	e0656006 	rsb	r6, r5, r6
 be8:	e1b06146 	asrs	r6, r6, #2
 bec:	12455004 	subne	r5, r5, #4
 bf0:	13a04000 	movne	r4, #0
 bf4:	0a000005 	beq	c10 <__libc_init_array+0x38>
 bf8:	e2844001 	add	r4, r4, #1
 bfc:	e5b53004 	ldr	r3, [r5, #4]!
 c00:	e1a0e00f 	mov	lr, pc
 c04:	e12fff13 	bx	r3
 c08:	e1560004 	cmp	r6, r4
 c0c:	1afffff9 	bne	bf8 <__libc_init_array+0x20>
 c10:	e59f5040 	ldr	r5, [pc, #64]	; c58 <__libc_init_array+0x80>
 c14:	e59f6040 	ldr	r6, [pc, #64]	; c5c <__libc_init_array+0x84>
 c18:	e0656006 	rsb	r6, r5, r6
 c1c:	eb000016 	bl	c7c <_init>
 c20:	e1b06146 	asrs	r6, r6, #2
 c24:	12455004 	subne	r5, r5, #4
 c28:	13a04000 	movne	r4, #0
 c2c:	0a000005 	beq	c48 <__libc_init_array+0x70>
 c30:	e2844001 	add	r4, r4, #1
 c34:	e5b53004 	ldr	r3, [r5, #4]!
 c38:	e1a0e00f 	mov	lr, pc
 c3c:	e12fff13 	bx	r3
 c40:	e1560004 	cmp	r6, r4
 c44:	1afffff9 	bne	c30 <__libc_init_array+0x58>
 c48:	e8bd4070 	pop	{r4, r5, r6, lr}
 c4c:	e12fff1e 	bx	lr
 c50:	00000c94 	.word	0x00000c94
 c54:	00000c94 	.word	0x00000c94
 c58:	00000c94 	.word	0x00000c94
 c5c:	00000c9c 	.word	0x00000c9c

Disassembly of section .rodata:

00000c64 <_global_impure_ptr-0x10>:
 c64:	38387976 	.word	0x38387976
 c68:	3e3e003f 	.word	0x3e3e003f
 c6c:	5e38503f 	.word	0x5e38503f
 c70:	00000000 	.word	0x00000000

00000c74 <_global_impure_ptr>:
 c74:	00000cf8 00000043                       ....C...

00000c7c <_init>:
 c7c:	e1a0c00d 	mov	r12, sp
 c80:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 c84:	e24cb004 	sub	r11, r12, #4
 c88:	e24bd028 	sub	sp, r11, #40	; 0x28
 c8c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 c90:	e12fff1e 	bx	lr

00000c94 <__init_array_start>:
 c94:	00000aec 	.word	0x00000aec

00000c98 <__frame_dummy_init_array_entry>:
 c98:	00000200                                ....

00000c9c <__libc_fini>:
 c9c:	e1a0c00d 	mov	r12, sp
 ca0:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 ca4:	e24cb004 	sub	r11, r12, #4
 ca8:	e24bd028 	sub	sp, r11, #40	; 0x28
 cac:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 cb0:	e12fff1e 	bx	lr

00000cb4 <__fini_array_start>:
 cb4:	000001bc 	.word	0x000001bc

00000cb8 <__cs3_regions>:
	...
 cc4:	00001128 	.word	0x00001128
 cc8:	00000020 	.word	0x00000020

00000ccc <__cs3_regions_end>:
 ccc:	00000000 	.word	0x00000000
